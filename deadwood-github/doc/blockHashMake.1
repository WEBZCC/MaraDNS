.\" Do *not* edit this file; it was automatically generated by ej2man
.\" Look for a name.ej file with the same name as this filename
.\"
.\" Process this file with the following (replace filename.1)
.\" preconv < filename.1 | nroff -man -Tutf8
.\"
.\" Last updated 2023-01-18
.\"
.TH BLOCKHASHMAKE 1 "Dec 2022" BLOCKHASHMAKE "blockHashMake reference"
.\" We don't want hyphenation (it's too ugly)
.\" We also disable justification when using nroff
.\" Due to the way the -mandoc macro works, this needs to be placed
.\" after the .TH heading
.hy 0
.if n .na
.\"
.\" We need the following stuff so that we can have single quotes
.\" In both groff and other UNIX *roff processors
.if \n(.g .mso www.tmac
.ds aq \(aq
.if !\n(.g .if '\(aq'' .ds aq \'

  
.SH "NAME"
.PP
blockHashMake - Make a block hash file for Deadwood 
.SH "DESCRIPTION"
.PP
blockHashMake is a stand alone command line tool which converts a list 
of host names in to a 
.I "block hash file"
which Deadwood can read to block a large number of hosts quickly while 
using a minimum amount of memory to store the list of blocked hosts. 
.PP
A block hash file uses a special binary format for storing a list of 
blocked host names. 
.PP
blockHashMake reads the list of host names from the standard input and 
generates a binary file. 
.SH "COMMAND LINE ARGUMENTS"
.PP
blockHashMake can be invoked without command line arguments. If invoked 
without arguments, blockHashMake reads the list of host names to block 
from standard input and outputs the block hash to a file name 
"bigBlock.bin" 
.PP
blockHashMake can be invoked with a single "--help" or "--version" 
command line argument (e.g. "blockHashMake --version") which will 
output the version number of blockHashMake and provide basic usage 
information. 
.PP
The command line arguments are as follows:

.nf
blockHashMake [filename] [sip hash key] [hash bucket count] 
.fi

The 
.B "filename"
is the name of the file we output the block hash to. If not specified, 
blockHashMake will output to the file named "bigBlock.bin". 
blockHashMake should not clobber an already existing file; if a file 
named "bigBlock.bin" (or the filename specified on the command line) 
already exists, be sure to delete the file before invoking 
blockHashMake to recreate the file. 
.PP
The 
.B "sip hash key"
is usually set by the blockHashMake program, which, by default, uses 
/dev/urandom to generate a random 64-bit key for the block hash file 
(the Windows port of blockHashMake uses the CryptGenRandom function to 
get a random 64-bit key). If the 
.B "sip hash key"
is given a value of 0, this can make a block hash file which can be 
shared on the internet. 
.PP
.IR "Warning" ":"
For security purposes, please set the sip hash key to 0 if sharing a 
block hash file on the internet! 
.PP
Deadwood will only load a block hash file with a sip hash key of 0 if 
allow_block_hash_zero_key has a value of 1. 
.PP
A user specified sip hash key only has up to 16 bits of entropy. 
.B "sip hash key"
should 
.I "not"
be used if a secret key for the hash compression algorithm is desired. 
.PP
The 
.B "hash bucket count"
is the number of hash buckets the resulting block hash file will have. 
Having more hash buckets makes the block hash file larger, but 
sometimes allows searching for a string in a block hash to be a little 
faster. The default value, which is 125% of the number of host names 
given to blockHashMake, is a reasonable compromise between speed and 
size. 
.SH "HOST LIST FORMAT"
.PP
After being invoked, blockHashMake reads a list of host names from the 
standard input. The format is a single host name per line of input, 
such as the following:

.nf
porn.example.com 
naughty.foo 
evil.host.invalid 
.fi

Each line is a host name. Should there be a duplicate host name, 
blockHashMake will only store one instance of the host name in 
question. Host names are case insensitive; upper case ASCII letters are 
converted in to lower case letters beofre adding the host name to the 
block hash generated by blockHashMake. 
.PP
In order to allow there to be notes in files that blockHashMake reads, 
blockHashMake has simple support for comments: Any line which begins 
with the # character will be ignored by the blockHashMake program. Note 
that the # character 
.I "must"
be at the very beginning of a line for the line to be ignored by 
BlockHashMake. 
.PP
For example:

.nf
# Porn sites 
porn.example.com 
fetish.example.net 
# Phishing sites 
naughty.foo 
evil.host.invalid 
.fi

This will add porn.example.com, fetish.example.net, naughty.foo, and 
evil.host.invalid to the block hash file, while ignoring the two lines 
which start with #. 
.PP
blockHashMake has no support for Punycode. Please use another program 
to convert international domain names with non-ASCII characters in to 
their punycode representation before adding them to a block hash with 
blockHashMake. 
.SH "LIMITATIONS"
.PP
The block hash format that blockHashMake uses is a 32-bit format, and 
the resulting block hash file should be under 2,147,483,648 bytes in 
size. This is a limitation of around 30 million host names. 
.SH "LEGAL DISCLAIMERS"
.PP
THIS SOFTWARE IS PROVIDED BY THE AUTHORS \(aq\(aqAS IS\(aq\(aq AND ANY 
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
.PP
This is a project developed on a strictly volunteer, non-commercial 
basis. It has been developed outside the course of a commercial 
activity, developed entirely in the Americas (i.e. 
.IR "outside of Europe" ")"
and therefore is not subject to the restrictions or conditions of the 
proposed EU Cyber Resilience Act. Someone selling a product that uses 
any component of this may be subject to this act and may need to handle 
any and all necessary compliance. 
.SH "AUTHORS"
.PP
Sam Trenholme (https://www.samiam.org) is responsible for this program 
and man page.  

